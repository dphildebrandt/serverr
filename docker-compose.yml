version: "3.9"

networks:
  t2_proxy:
    name: t2_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.90.0/24
  default:
    driver: bridge
  socket_proxy:
    name: socket_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.91.0/24

secrets:
  namecheap_api_user:
    file: $DOCKER_DIR/secrets/namecheap_api_user
  namecheap_api_key:
    file: $DOCKER_DIR/secrets/namecheap_api_key
  plex_claim:
    file: $DOCKER_DIR/secrets/plex_claim
  mysql_root_password:
    file: $DOCKER_DIR/secrets/mysql_root_password
  guac_db_name:
    file: $DOCKER_DIR/secrets/guac_db_name
  guac_mysql_user:
    file: $DOCKER_DIR/secrets/guac_mysql_user
  guac_mysql_password:
    file: $DOCKER_DIR/secrets/guac_mysql_password
  plex_token:
    file: $DOCKER_DIR/secrets/plex_token

  # This one loads the secret into the config, so you need the follow:
  # provider.google.client-id=
  # provider.google.client-secret=
  # secret=
  # whitelist=
  traefik-forward-auth:
    file: $DOCKER_DIR/secrets/traefik-forward-auth

x-environment: &default-tz-puid-pgid
  TZ: $TZ
  PUID: $PUID
  PGID: $PGID

x-networks: &network-sec
  networks:
    - t2_proxy
  security_opt:
    - no-new-privileges:true
  restart: unless-stopped

services:

  # FRONTENDS

  traefik:
    <<: *network-sec
    container_name: traefik
    image: traefik:latest
    command:
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=false
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --entryPoints.traefik.address=:8080
      - --api=true
      - --log=true
      - --log.level=WARN
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=$SOCKET_PROXY
      - --entrypoints.https.http.tls.options=tls-opts@file
      - --entrypoints.https.http.tls.domains[0].main=$DOMAIN_NAME
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAIN_NAME
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules
      - --providers.file.watch=true
      #- --certificatesResolvers.dns-namecheap.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory  # uncomment for testing
      - --certificatesResolvers.dns-namecheap.acme.email=$MY_EMAIL
      - --certificatesResolvers.dns-namecheap.acme.storage=/acme.json
      - --certificatesResolvers.dns-namecheap.acme.dnsChallenge.provider=namecheap
      - --certificatesResolvers.dns-namecheap.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-namecheap.acme.dnsChallenge.delayBeforeCheck=90
    networks:
      - t2_proxy
      - socket_proxy
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    volumes:
      - $DOCKER_DIR/traefik2/rules:/rules
      - $DOCKER_DIR/traefik2/acme/acme.json:/acme.json
      - $DOCKER_DIR/traefik2/traefik.log:/traefik.log
    secrets:
      - namecheap_api_user
      - namecheap_api_key
    environment:
      NAMECHEAP_API_USER_FILE: /run/secrets/namecheap_api_user
      NAMECHEAP_API_KEY_FILE: /run/secrets/namecheap_api_key
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAIN_NAME`)"
      # - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-namecheap"  # uncomment for first run of traefik, commented to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAIN_NAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAIN_NAME"
      # Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      # Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file"

  socket-proxy:
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy:latest
    restart: always
    networks:
      - socket_proxy
    privileged: true
    ports:
      - "127.0.0.1:2375:2375"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=info
      # Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      # Revoked by Default
      - AUTH=0
      - SECRETS=0
      - POST=1  # Watchtower
      # GET options
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1  # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1  # Portainer, watchtower
      - INFO=1  # Portainer
      - NETWORKS=1  # Portainer, watchtower
      - NODES=0
      - PLUGINS=0
      - SERVICES=1  # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1  # Portaienr
      - VOLUMES=1  # Portainer

  oauth:
    <<: *network-sec
    container_name: oauth
    image: thomseddon/traefik-forward-auth:latest
    environment:
      - CONFIG=/config
      - COOKIE_DOMAIN=$DOMAIN_NAME
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth.$DOMAIN_NAME
      - URL_PATH=/_oauth
      - LOG_LEVEL=warn
      - LOG_FORMAT=text
      - LIFETIME=2592000  # 30 days
      - DEFAULT_ACTION=auth
      - DEFAULT_PROVIDER=google
    secrets:
      - source: traefik-forward-auth
        target: /config
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.oauth-rtr.entrypoints=https"
      - "traefik.http.routers.oauth-rtr.rule=Host(`oauth.$DOMAIN_NAME`)"
      # HTTP Services
      - "traefik.http.routers.oauth-rtr.service=oauth-svc"
      - "traefik.http.services.oauth-svc.loadbalancer.server.port=4181"
      # Middlewares
      - "traefik.http.routers.oauth-rtr.middlewares=chain-oauth@file"
 
  heimdall:
    <<: *network-sec
    container_name: heimdall
    image: linuxserver/heimdall:latest
    volumes:
      - $DOCKER_DIR/heimdall:/config
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.heimdall-rtr.entrypoints=https"
      - "traefik.http.routers.heimdall-rtr.rule=Host(`$DOMAIN_NAME`) || Host(`www.$DOMAIN_NAME`)"
      ## Middlewares
      - "traefik.http.middlewares.heimdall-redirect.redirectregex.regex=^https?://$DOMAIN_NAME(/.*)?$$"
      - "traefik.http.middlewares.heimdall-redirect.redirectregex.replacement=https://www.$DOMAIN_NAME$${1}"
      - "traefik.http.middlewares.heimdall-redirect.redirectregex.permanent=true"
      - "traefik.http.routers.heimdall-rtr.middlewares=chain-oauth@file,heimdall-redirect"
      ## HTTP Services
      - "traefik.http.routers.heimdall-rtr.service=heimdall-svc"
      - "traefik.http.services.heimdall-svc.loadbalancer.server.port=80"

  overseerr:
    <<: *network-sec
    image: sctx/overseerr:latest
    container_name: overseerr
    volumes:
      - $DOCKER_DIR/overseerr:/app/config
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.overseerr-rtr.entrypoints=https"
      - "traefik.http.routers.overseerr-rtr.rule=Host(`request.$DOMAIN_NAME`) || HOST(`ombi.$DOMAIN_NAME`)"
      # Middlewares
      - "traefik.http.middlewares.ombi-redirect.redirectregex.regex=^https?://ombi.$DOMAIN_NAME(/.*)?$$"
      - "traefik.http.middlewares.ombi-redirect.redirectregex.replacement=https://request.$DOMAIN_NAME"
      - "traefik.http.middlewares.ombi-redirect.redirectregex.permanent=true"
      - "traefik.http.routers.overseerr-rtr.middlewares=chain-no-auth@file,ombi-redirect"
      # HTTP Services
      - "traefik.http.routers.overseerr-rtr.service=overseerr-svc"
      - "traefik.http.services.overseerr-svc.loadbalancer.server.port=5055"

  # DOWNLOADERS

  sabnzbd:
    <<: *network-sec
    image: linuxserver/sabnzbd:latest
    container_name: sabnzbd
    volumes:
      - $DOCKER_DIR/sabnzbd:/config
      - $DOWNLOAD_DIR:/downloads
    environment:
      <<: *default-tz-puid-pgid
      UMASK_SET: 002
    labels:
      - "traefik.enable=true"
      # HTTP Routers Auth
      - "traefik.http.routers.sabnzbd-rtr.entrypoints=https"
      - "traefik.http.routers.sabnzbd-rtr.rule=Host(`sabnzbd.$DOMAIN_NAME`)"
      # Middlewares
      - "traefik.http.routers.sabnzbd-rtr.middlewares=chain-oauth@file"
      # HTTP Services
      - "traefik.http.routers.sabnzbd-rtr.service=sabnzbd-svc"
      - "traefik.http.services.sabnzbd-svc.loadbalancer.server.port=8080"

  deluge:
    <<: *network-sec
    image: linuxserver/deluge:latest
    container_name: deluge
    environment:
      <<: *default-tz-puid-pgid
      UMASK_SET: 022
    volumes:
      - $DOCKER_DIR/deluge:/config
      - $DOWNLOAD_DIR:/downloads
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.deluge-rtr.entrypoints=https"
      - "traefik.http.routers.deluge-rtr.rule=Host(`deluge.$DOMAIN_NAME`)"
      # Middlewares
      - "traefik.http.routers.deluge-rtr.middlewares=chain-oauth@file"
      # HTTP Services
      - "traefik.http.routers.deluge-rtr.service=deluge-svc"
      - "traefik.http.services.deluge-svc.loadbalancer.server.port=8112"

  # INDEXERS

  prowlarr:
    <<: *network-sec
    image: linuxserver/prowlarr:develop
    container_name: prowlarr
    volumes:
      - $DOCKER_DIR/prowlarr:/config
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.prowlarr-rtr.entrypoints=https"
      - "traefik.http.routers.prowlarr-rtr.rule=Host(`prowlarr.$DOMAIN_NAME`)"
      # Middlewares
      - "traefik.http.routers.prowlarr-rtr.middlewares=chain-oauth@file"
      # HTTP Services
      - "traefik.http.routers.prowlarr-rtr.service=prowlarr-svc"
      - "traefik.http.services.prowlarr-svc.loadbalancer.server.port=9696"

  # PVRS

  radarr:
    <<: *network-sec
    image: linuxserver/radarr:latest
    container_name: radarr
    volumes:
      - $DOCKER_DIR/radarr:/config
      - $DOWNLOAD_DIR:/downloads
      - $MEDIA_DIR/movies:/movies
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      # HTTP Routers Auth Bypass
      - "traefik.http.routers.radarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.radarr-rtr-bypass.rule=Host(`radarr.$DOMAIN_NAME`) && (Headers(`X-Api-Key`, `$RADARR_API_KEY`) || Query(`apikey`, `$RADARR_API_KEY`))"
      - "traefik.http.routers.radarr-rtr-bypass.priority=100"
      # HTTP Routers Auth
      - "traefik.http.routers.radarr-rtr.entrypoints=https"
      - "traefik.http.routers.radarr-rtr.rule=Host(`radarr.$DOMAIN_NAME`)"
      - "traefik.http.routers.radarr-rtr.priority=99"
      # Middlewares
      - "traefik.http.routers.radarr-rtr.middlewares=chain-oauth@file"
      - "traefik.http.routers.radarr-rtr-bypass.middlewares=chain-no-auth@file"
      # HTTP Services
      - "traefik.http.routers.radarr-rtr.service=radarr-svc"
      - "traefik.http.routers.radarr-rtr-bypass.service=radarr-svc"
      - "traefik.http.services.radarr-svc.loadbalancer.server.port=7878"

  sonarr:
    <<: *network-sec
    image: linuxserver/sonarr:latest
    container_name: sonarr
    volumes:
      - $DOCKER_DIR/sonarr:/config
      - $DOWNLOAD_DIR:/downloads
      - $MEDIA_DIR/tv:/tv
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      # HTTP Routers Auth Bypass
      - "traefik.http.routers.sonarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr-bypass.rule=Host(`sonarr.$DOMAIN_NAME`) && (Headers(`X-Api-Key`, `$SONARR_API_KEY`) || Query(`apikey`, `$SONARR_API_KEY`))"
      - "traefik.http.routers.sonarr-rtr-bypass.priority=100"
      # HTTP Routers Auth
      - "traefik.http.routers.sonarr-rtr.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr.rule=Host(`sonarr.$DOMAIN_NAME`)"
      - "traefik.http.routers.sonarr-rtr.priority=99"
      # Middlewares
      - "traefik.http.routers.sonarr-rtr.middlewares=chain-oauth@file"
      - "traefik.http.routers.sonarr-rtr-bypass.middlewares=chain-no-auth@file"
      # HTTP Services
      - "traefik.http.routers.sonarr-rtr.service=sonarr-svc"
      - "traefik.http.routers.sonarr-rtr-bypass.service=sonarr-svc"
      - "traefik.http.services.sonarr-svc.loadbalancer.server.port=8989"

  lidarr:
    <<: *network-sec
    image: linuxserver/lidarr:latest
    container_name: lidarr
    volumes:
      - $DOCKER_DIR/lidarr:/config
      - $DOWNLOAD_DIR:/downloads
      - $MEDIA_DIR/music:/music
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.lidarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.lidarr-rtr-bypass.rule=Host(`lidarr.$DOMAIN_NAME`) && (Headers(`X-Api-Key`, `$LIDARR_API_KEY`) || Query(`apikey`, `$LIDARR_API_KEY`))"
      - "traefik.http.routers.lidarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.lidarr-rtr.entrypoints=https"
      - "traefik.http.routers.lidarr-rtr.rule=Host(`lidarr.$DOMAIN_NAME`)"
      - "traefik.http.routers.lidarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.lidarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.lidarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.lidarr-rtr.service=lidarr-svc"
      - "traefik.http.routers.lidarr-rtr-bypass.service=lidarr-svc"
      - "traefik.http.services.lidarr-svc.loadbalancer.server.port=8686"

  bazarr:
    <<: *network-sec
    image: linuxserver/bazarr:latest
    container_name: bazarr
    volumes:
      - $DOCKER_DIR/bazarr:/config
      - $MEDIA_DIR/tv:/tv
      - $MEDIA_DIR/movies:/movies
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.bazarr-rtr.entrypoints=https"
      - "traefik.http.routers.bazarr-rtr.rule=Host(`bazarr.$DOMAIN_NAME`)"
      # Middlewares
      - "traefik.http.routers.bazarr-rtr.middlewares=chain-oauth@file"
      # HTTP Services
      - "traefik.http.routers.bazarr-rtr.service=bazarr-svc"
      - "traefik.http.services.bazarr-svc.loadbalancer.server.port=6767"

  # MEDIA

  plexms:
    image: plexinc/pms-docker:latest
    container_name: plexms
    restart: unless-stopped
    network_mode: host
    security_opt:
      - no-new-privileges:true
    volumes:
      - $DOCKER_DIR/plexms:/config
      - /dev/shm:/transcode  # offload transcoding to RAM
      - $MEDIA_DIR:/media
    devices:
      - /dev/dri:/dev/dri  # for hardware transcoding
    secrets:
      - plex_claim
    environment:
      TZ: $TZ
      PLEX_CLAIM_FILE: /run/secrets/plex_claim
      PLEX_UID: $PUID
      PLEX_GID: $PGID

  pal:
    <<: *network-sec
    image: remirigal/plex-auto-languages:latest
    container_name: plex-auto-languages
    secrets:
      - plex_token
    environment:
      <<: *default-tz-puid-pgid
      PLEX_URL: http://192.168.1.29:32400
      PLEX_TOKEN_FILE: /run/secrets/plex_token

  tautulli:
    <<: *network-sec
    image: linuxserver/tautulli:latest
    container_name: tautulli
    volumes:
      - $DOCKER_DIR/tautulli/config:/config
      - $DOCKER_DIR/plexms/Library/Application Support/Plex Media Server/Logs:/logs:ro  # For tautulli Plex log viewer
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      # HTTP Routers Auth Bypass
      - "traefik.http.routers.tautulli-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.tautulli-rtr-bypass.rule=Host(`tautulli.$DOMAIN_NAME`) && Query(`apikey`, `$TAUTULLI_DEVICE_TOKEN`)"
      - "traefik.http.routers.tautulli-rtr-bypass.priority=100" 
      # HTTP Routers
      - "traefik.http.routers.tautulli-rtr.entrypoints=https"
      - "traefik.http.routers.tautulli-rtr.rule=Host(`tautulli.$DOMAIN_NAME`)"
      - "traefik.http.routers.tautulli-rtr.priority=99"
      # Middlewares
      - "traefik.http.routers.tautulli-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.tautulli-rtr.middlewares=chain-oauth@file"
      # HTTP Services
      - "traefik.http.routers.tautulli-rtr.service=tautulli-svc"
      - "traefik.http.routers.tautulli-rtr-bypass.service=tautulli-svc"
      - "traefik.http.services.tautulli-svc.loadbalancer.server.port=8181"

  mealie:
    <<: *network-sec
    container_name: mealie
    image: hkotel/mealie:latest
    volumes:
      - $DOCKER_DIR/mealie:/app/data
    environment:
      <<: *default-tz-puid-pgid
      RECIPE_PUBLIC: "true"
      RECIPE_SHOW_NUTRITION: "false"
      RECIPE_DISABLE_COMMENTS: "true"
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.mealie-rtr.entrypoints=https"
      - "traefik.http.routers.mealie-rtr.rule=Host(`recipes.$DOMAIN_NAME`)"
      # Middlewares
      - "traefik.http.routers.mealie-rtr.middlewares=chain-no-auth@file"
      # HTTP Serices
      - "traefik.http.routers.mealie-rtr.service=mealie-svc"
      - "traefik.http.services.mealie-svc.loadbalancer.server.port=80"

  # UTILITY

  portainer:
    <<: *network-sec
    image: portainer/portainer-ce:latest
    container_name: portainer
    command: -H $SOCKET_PROXY
    networks:
      - t2_proxy
      - socket_proxy
    volumes:
      - $DOCKER_DIR/portainer/data:/data
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.portainer-rtr.entrypoints=https"
      - "traefik.http.routers.portainer-rtr.rule=Host(`portainer.$DOMAIN_NAME`)"
      # Middlewares
      - "traefik.http.routers.portainer-rtr.middlewares=chain-oauth@file"
      # HTTP Services
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"

  glances:
    <<: *network-sec
    image: nicolargo/glances:latest
    container_name: glances
    privileged: true
    networks:
      - t2_proxy
      - socket_proxy
    pid: host
    environment:
      GLANCES_OPT: "-w --fs-free-space"
      DOCKER_HOST: $SOCKET_PROXY
    volumes:
      - $MEDIA_DIR:/data/hdd1:ro
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.glances-rtr.entrypoints=https"
      - "traefik.http.routers.glances-rtr.rule=Host(`glances.$DOMAIN_NAME`)"
      # Middlewares
      - "traefik.http.routers.glances-rtr.middlewares=chain-oauth@file"
      # HTTP Services
      - "traefik.http.routers.glances-rtr.service=glances-svc"
      - "traefik.http.services.glances-svc.loadbalancer.server.port=61208"

  watchtower:
    <<: *network-sec
    container_name: watchtower
    image: containrrr/watchtower:latest
    networks:
      - socket_proxy
    environment:
      <<: *default-tz-puid-pgid
      DOCKER_HOST: $SOCKET_PROXY
    command: -s "0 0 2 * * *" --cleanup

  speedtest:
    <<: *network-sec
    container_name: speedtest
    image: henrywhitaker3/speedtest-tracker
    volumes:
      - $DOCKER_DIR/speedtest:/config
    environment:
      <<: *default-tz-puid-pgid
      OOKLA_EULA_GDPR: "true"
    logging:
      driver: "json-file"
      options:
        max-file: "10"
        max-size: "200k"
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.speedtest-rtr.entrypoints=https"
      - "traefik.http.routers.speedtest-rtr.rule=Host(`speedtest.$DOMAIN_NAME`)"
      # Middlewares
      - "traefik.http.routers.speedtest-rtr.middlewares=chain-oauth@file"
      # HTTP Services
      - "traefik.http.routers.speedtest-rtr.service=speedtest-svc"
      - "traefik.http.services.speedtest-svc.loadbalancer.server.port=80"

  mariadb:
    <<: *network-sec
    container_name: mariadb
    image: linuxserver/mariadb:latest
    volumes:
      - $DOCKER_DIR/mariadb:/config
    ports:
      - "$MARIADB_PORT:3306"
    secrets:
      - mysql_root_password
    environment:
      <<: *default-tz-puid-pgid
      FILE__MYSQL_ROOT_PASSWORD: /run/secrets/mysql_root_password

  guacd:
    <<: *network-sec
    container_name: guacd
    image: guacamole/guacd:latest

  guacamole:
    <<: *network-sec
    image: guacamole/guacamole:latest
    container_name: guacamole
    secrets:
      - guac_mysql_user
      - guac_mysql_password
      - guac_db_name
    environment:
      GUACD_HOSTNAME: guacd
      MYSQL_HOSTNAME: $MARIADB_HOST
      MYSQL_PORT: $MARIADB_PORT
      MYSQL_DATABASE_FILE: /run/secrets/guac_db_name
      MYSQL_USER_FILE: /run/secrets/guac_mysql_user
      MYSQL_PASSWORD_FILE: /run/secrets/guac_mysql_password
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.guacamole-rtr.entrypoints=https"
      - "traefik.http.routers.guacamole-rtr.rule=Host(`guac.$DOMAIN_NAME`)"
      # Middlewares
      - "traefik.http.routers.guacamole-rtr.middlewares=chain-oauth@file,add-guacamole"
      - "traefik.http.middlewares.add-guacamole.addPrefix.prefix=/guacamole"
      # HTTP Services
      - "traefik.http.routers.guacamole-rtr.service=guacamole-svc"
      - "traefik.http.services.guacamole-svc.loadbalancer.server.port=8080"
